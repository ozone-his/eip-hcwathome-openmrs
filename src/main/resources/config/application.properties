# *********************** General EIP client properties ****************************************************************
#
eip.home=${user.home}${file.separator}.openmrs-eip

# A comma separated list of database tables names to watch for changes
eip.watchedTables=person,person_name,patient_appointment

# Camel endpoints that need to be notified of DB events
db-event.destinations=direct:event-listener

management.health.jms.enabled=false

# The interval in milliseconds before the first poll of the debezium event queue by the debezium reader route when the
# application starts.
debezium-event-reader.initial.delay=${DEBEZIUM_EVENT_READER_INITIAL_DELAY:5000}

# The interval in milliseconds between polls of the debezium event queue by the debezium reader route
debezium-event-reader.repeat.interval=${DEBEZIUM_EVENT_READER_DELAY:5000}

# The interval in milliseconds between polls of the retry queue by the retry route
db-event.retry.interval=${DEBEZIUM_EVENT_RETRY_DELAY:1800000}

# The interval in milliseconds before the first poll of the retry queue by the retry route when the application starts.
db-event.retry.initial.delay=${DEBEZIUM_EVENT_RETRY_INITIAL_DELAY:120000}
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Logging Configuration ************************************************************************
#
# Uncomment this to use console logging otherwise defaults to the logback.xml file located on the classpath which is
# configured to log to ${eip.home}/logs/openmrs-eip.log
logging.config=${EIP_LOGBACK_FILE:classpath:logback-console.xml}

# Logging level for the application loggers (all built-in routes and classes)
openmrs.eip.log.level=${LOG_LEVEL:INFO}

# Logging level for ONLY application class loggers, feel free to add more logger configurations
logging.level.org.openmrs.eip=${openmrs.eip.log.level}
# ----------------------------------------------------------------------------------------------------------------------


# *********************** OpenMRS Webapp Configuration *****************************************************************
#
# The purpose of this config is so that the receiver sync app can make a rest call to trigger search index rebuild
# it processes a payload for an indexed entity e.g. person_name, person_attribute, patient_identifier etc.
# It's highly recommended that you create a specific user account for use here
#
# The base URL to the receiving OpenMRS webapp
openmrs.baseUrl=${OPENMRS_BASE_URL}

# The username for the account to use to log into the receiver OpenMRS instance
openmrs.username=${OPENMRS_USERNAME}

# The password for the account to use to log into the receiver OpenMRS instance
openmrs.password=${OPENMRS_PASSWORD}
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Configuration of the openMRS database to read from *******************************************
#
# The IP address or host name of the OpenMRS MySQL database
openmrs.db.host=${OPENMRS_DB_HOST}

# The OpenMRS MySQL database port
openmrs.db.port=${OPENMRS_DB_PORT:3306}

# The OpenMRS MySQL database name
openmrs.db.name=${OPENMRS_DB_NAME:openmrs}
# ----------------------------------------------------------------------------------------------------------------------


# *********************** OpenMRS Datasource config ********************************************************************
#
# Driver class of the openMRS datasource
spring.openmrs-datasource.driverClassName=com.mysql.cj.jdbc.Driver

# Hibernate dialect
spring.openmrs-datasource.dialect=org.hibernate.dialect.MySQLDialect

# Url of the openMRS datasource, you don't have to change this value as long you've set the placeholder property values
spring.openmrs-datasource.jdbcUrl=jdbc:mysql://${openmrs.db.host}:${openmrs.db.port}/${openmrs.db.name}

# User name of the openMRS datasource
spring.openmrs-datasource.username=${OPENMRS_DB_USER}

# Password of the openMRS datasource
spring.openmrs-datasource.password=${OPENMRS_DB_PASSWORD}
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Configuration of the Management database *****************************************************
#
# Driver class of the management datasource (should not be changed in a usual use)
spring.mngt-datasource.driverClassName=com.mysql.cj.jdbc.Driver

# Hibernate dialect
spring.mngt-datasource.dialect=org.hibernate.dialect.MySQLDialect

# Url of the management datasource
spring.mngt-datasource.jdbcUrl=jdbc:mysql://${openmrs.db.host}:${openmrs.db.port}/${EIP_DB_NAME}?createDatabaseIfNotExist=true

# User name of the management datasource
spring.mngt-datasource.username=${EIP_DB_USER}

# Password of the management datasource
spring.mngt-datasource.password=${EIP_DB_PASSWORD}
# ----------------------------------------------------------------------------------------------------------------------


# *********************** Debezium Config ******************************************************************************
#
# For details explanations of these properties, please refer to
# https://debezium.io/documentation/reference/connectors/mysql.html#mysql-connector-properties
#
# Maps to the connector property named database.server.id, see
# https://debezium.io/documentation/reference/connectors/mysql.html#mysql-property-database-server-id
# A numeric ID of this database client, which must be unique across all currently-running database processes in the MySQL cluster
# Choose a unique ID different from others processes, DO NOT change after setting it
debezium.db.serverId=${EIP_DEBEZIUM_SERVER_ID}

# Unique logical name of the MySQL database server, maps to the debezium MySQL connector property named
# database.server.name, DO NOT change after setting it
debezium.db.serverName=${EIP_DEBEZIUM_SERVER_NAME}

# Database username for debezium user account you created to access the MySQL binlog, maps to the debezium MySQL
# connector property named database.user, it's highly recommended to create separate user account as described at
# https://debezium.io/documentation/reference/connectors/mysql.html#setting-up-mysql
debezium.db.user=${EIP_DEBEZIUM_USER}

# Database password for debezium user account you created to access the MySQL binlog, maps to the debezium MySQL
# connector property named database.password
debezium.db.password=${EIP_DEBEZIUM_PASSWORD}

# Specifies the criteria for running a snapshot when the connector starts, DO NOT change after setting it, maps to the
# debezium MySQL connector property named snapshot.mode
debezium.snapshotMode=schema_only

#Controls whether and how long the connector holds the global MySQL read lock, which prevents any updates to
# the database, while the connector is performing a snapshot
# https://debezium.io/documentation/reference/connectors/mysql.html#mysql-property-snapshot-locking-mode
debezium.snapshotLockingMode=extended

# Maximum size of each batch of source records to be read by debezium from the binlog files, maps to the
## debezium MySQL connector property named max.batch.size
#https://debezium.io/documentation/reference/1.6/connectors/mysql.html#mysql-property-max-batch-size
debezium.reader.maxBatchSize=2048

# The 2 properties below are debezium engine specific and are documented at
# https://debezium.io/documentation/reference/development/engine.html#engine-properties
#
# Path to file where offsets are to be stored, maps to property named offset.storage.file.filename, DO NOT change after
# setting it
debezium.offsetFilename=${DEBEZIUM_OFFSET_FILE}

# Path to file where offsets are to be stored, maps to property named database.history.file.filename, DO NOT change
# after setting it
debezium.historyFilename=${DEBEZIUM_HISTORY_FILE}
# ----------------------------------------------------------------------------------------------------------------------


# *************************************** Oauth Configuration **********************************************************
#
#Enabled Oauth when set to true
oauth.enabled=${OAUTH_ENABLED:false}

#The URL for fetching Oauth tokens from the identity provider
oauth.access.token.uri=${OAUTH_ACCESS_TOKEN_URL:}

#The client id of the account to use to authenticate
oauth.client.id=${OAUTH_CLIENT_ID:}

#The client secret of the account to use to authenticate
oauth.client.secret=${OAUTH_CLIENT_SECRET:}

#Authentication scope, can be multiple values separated by commas
oauth.client.scope=${OAUTH_CLIENT_SCOPE:}
# ----------------------------------------------------------------------------------------------------------------------

